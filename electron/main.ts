import { app, BrowserWindow, ipcMain, Tray, Menu, dialog } from 'electron';
import { startBackgroundClipBoardWatcher } from './clipboardManager';
import { createMainWindow } from './window';
import { HISTORY_DIR, getTotalEntries, loadClipboardBatch, deleteClipboardEntry,
         addClipboardTag, removeClipboardTag, getAllTags } from './clipboardHistory';
import fs from 'fs';
import path from 'path';
import { SearchQuery } from '../shared/types';

let mainWindow: BrowserWindow | undefined = undefined;
let pollInterval: NodeJS.Timeout | undefined = undefined;
let tray: Tray | undefined = undefined;


export const IS_DEV = process.env.NODE_ENV === 'development';
/**
 * Initializes the application:
 * - Ensures the clipboard history directory exists.
 * - Creates the main application window.
 * - Starts polling the system clipboard.
 * - Initializes the system tray for background access.
 */
async function initiateApp(): Promise<void> {
    // Ensure history directory exists
    if (!fs.existsSync(HISTORY_DIR)) {
        fs.mkdirSync(HISTORY_DIR);
    }

    // Create the main window
    mainWindow = createMainWindow(1000, 800);
    
    // Start background clipboard watcher only if not already running
    if (!pollInterval) {
        pollInterval = await startBackgroundClipBoardWatcher();
    }

    // Clear reference when main window is closed (but keep polling running)
    mainWindow.on('closed', () => {
        mainWindow = undefined;
        // DON'T clear pollInterval here - keep clipboard watching in background
    });

    // Create tray icon if it doesn't exist
    initializeTray();
}

function initializeTray(): void {
    if (tray) return; // Tray already exists

    // icon generated by chatgpt
    const iconPath = IS_DEV
                    ? path.join(__dirname, '../../assets/tray-icon.png')   
                    : path.join(process.resourcesPath, 'assets', 'tray-icon.png');
    try {
        tray = new Tray(iconPath);
        
        const contextMenu = Menu.buildFromTemplate([
            {
                label: 'Show App',
                click: () => {
                    // Restore or create main window
                    if (!mainWindow || mainWindow.isDestroyed()) {
                        mainWindow = createMainWindow(1000, 800);
                        // Background clipboard watcher is already running
                    } else {
                        mainWindow.show();
                        mainWindow.focus();
                    }
                }
            },
            { type: 'separator' },
            {
                label: 'Quit',
                click: () => {
                    // Clean up polling and quit app
                    if (pollInterval) {
                        clearInterval(pollInterval);
                        pollInterval = undefined;
                    }
                    app.quit();
                }
            }
        ]);
        
        tray.setToolTip('ClipCache is running');
        tray.setContextMenu(contextMenu);
        
        // Double-click tray to show window
        tray.on('double-click', () => {
            if (!mainWindow || mainWindow.isDestroyed()) {
                mainWindow = createMainWindow(1000, 800);
            } else {
                mainWindow.show();
                mainWindow.focus();
            }
        });
        console.log("Successfully created tray!");
        
    } catch (error) {
        dialog.showErrorBox('Failed to create tray icon:', String(error));
    }
}

// Handles requests from renderer to get a batch of clipboard entries.
ipcMain.handle('get-batch', (_e, start: number, size: number, searchQuery?: SearchQuery) =>
    loadClipboardBatch(start, size, searchQuery)
);

// Handles requests from renderer to get the total number of entries.
ipcMain.handle('get-total', (_e, searchQuery?: SearchQuery) =>
    getTotalEntries(searchQuery)
);

// Handles requests from renderer to delete a clipboard entry.
ipcMain.handle('delete-clipboard-entry', (_e, timestamp: number) =>
    deleteClipboardEntry(timestamp)
);

// Handles requests from renderer to add tag to a specific clipboard entry
ipcMain.handle('add-tag', async (_e, timestamp: number, tag: string) =>
    addClipboardTag(timestamp, tag)
);

// Handles requests from renderer to remove tag from a specific clipboard entry
ipcMain.handle('remove-tag', async (_e, timestamp: number, tag: string) =>
    removeClipboardTag(timestamp, tag)
);


// Handles requests from renderer to get a list of all unique tags
ipcMain.handle('all-tags', async () => 
    getAllTags()
);



// Handles initial operations when the app is ready
app.whenReady().then(() => {
    initiateApp();
    app.on('activate', () => {
        if (BrowserWindow.getAllWindows().length === 0) {
            if (!mainWindow || mainWindow.isDestroyed()) {
                mainWindow = createMainWindow(1000, 800);
            }
        }
    });
});

// Prevent the app from quitting when all windows are closed.
// Keeps background functionality like clipboard tracking active.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        console.log('All windows closed, but keeping app running in background');
    }
});

// Handle app termination
app.on('before-quit', () => {
    if (pollInterval) {
        clearInterval(pollInterval);
        pollInterval = undefined;
    }
});